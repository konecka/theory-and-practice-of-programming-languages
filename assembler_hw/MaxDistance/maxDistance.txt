%macro pushd 0
    push edx
    push ecx
    push ebx
    push eax
%endmacro

%macro popd 0
    pop eax
    pop ebx
    pop ecx
    pop edx
%endmacro

%macro print 2
    pushd
    mov edx, %1
    mov ecx, %2
    mov ebx, 1
    mov eax, 4
    int 0x80
    popd
%endmacro

%macro dprint 0
    pushd
    
    mov ecx, 10
    mov bx, 0
    %%_divide:
        mov edx, 0
        div ecx
        push dx
        inc bx
        test eax, eax
        jnz %%_divide
        mov cx, bx
    %%_digit:
        pop ax
        add ax, '0'
        mov [count], ax
        print 1, count
        dec cx
        mov ax, cx
        cmp cx, 0
        jg %%_digit
    popd
%endmacro


section .text

global _start
    
_start:
    mov ecx, arr_len
    shr ecx, 3
    mov [len], ecx
    
    xor ecx, ecx
    
_loop_one:

    push ecx
        shl ecx, 2
        mov esi, x
        mov edx, [esi+ecx]
        
        mov esi, y
        mov ebx, [esi+ecx]
    pop ecx
    
    push ecx
    push edx
    push ebx
    
    mov ecx, 0

    _loop_two:
        
        push ecx
            shl    ecx, 2
            mov esi, x
            mov ebx, [esi+ecx]
        pop ecx
            
        sub edx, ebx
        imul edx, edx 
        mov eax, edx
        
        pop ebx
        push ebx
        
        push ecx
            mov esi, y
            shl    ecx, 2
            mov edx, [esi+ecx]
        pop ecx
        
        sub edx, ebx
        imul edx, edx
        add eax, edx
        
        mov [num], eax
        
        finit
        fild dword[num]
        fsqrt
        fistp dword[res]
        
        mov eax, [res]
        mov edx, [max_dist]
        
        cmp eax, edx
        jg _newMax
        jmp _nextTwo
        
_newMax:
    mov [max_dist], eax
    jmp _nextTwo

_nextTwo:
    pop ebx
    pop edx
    
    push edx
    push ebx
        
    inc ecx
    
    cmp ecx, 7
    jl _loop_two
    jmp _nextOne
    
_nextOne:
    pop ebx
    pop edx
    
    pop ecx
    inc ecx
    
    cmp ecx, 7
    jl _loop_one
    jmp _end
    
_end:
    mov eax, [max_dist] 
    dprint

    mov eax, 1
    int 0x80

section .data
    
    orig_number dd 0
    x dd 10, 1, 3, 4, 5, 5, 1
    y dd 2, 3, 5, 7, 10, 3, 2

    arr_len equ $ - x
    
    newline db 0xA, 0xD
    nlen equ $ - newline

segment .bss
    count resd 1
    max_dist resd 1
    num resd 1
    res resd 1
    len resd 1